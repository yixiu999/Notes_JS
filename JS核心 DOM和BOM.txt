    
Web API    

    Web APIs和JS基础关联性：JS基础学习ECMAScript基础语法为后面做铺垫，Web APIs是JS的应用，大量使用JS基础语法做交互效果。

    API和Web API总结：
	1、API是为程序员提供的一个接口，帮助我们实现某种功能，我们会使用就可以了，不必纠结内部如何实现
	2、Web API主要是针对于浏览器提供的接口，主要针对于浏览器做交互效果
	3、Web API一般都有输入和输出（函数的传参和返回值），Web API很多都是方法（函数）
	4、学习Web API可以结合前面学习内置对象方法的思路学习









DOM
    
    DOM简介

        文档对象模型（Document Object Model，简称DOM），是W3C组织推荐的处理可扩展标记语言（HTML或XML）的标准编程接口

        DOM树
	文档：一个页面就是一个文档，DOM中使用document表示
	元素：页面中的所有标签都是元素，DOM中使用element表示
	节点：网页中的所有内容都是节点（标签、属性、文本、注释等），DOM中使用node表示
	    DOM把以上内容都看作是对象
    
   
    获取元素

        1、根据ID获取：使用getElementById(id)方法可以获取带有ID的元素对象。
	例：var timer = document.getElementById('time')
	参数id是大小写敏感的字符串，返回的是一个元素对象

	console.dir()打印返回的元素对象，更好的查看里面的属性和方法


        2、根据标签名获取：使用getElementsByTagName()方法可以返回带有指定标签名的对象的集合
		1）返回的是获取过来元素对象的集合，以伪数组的形式存储的
		2）想要依次打印里面的元素对象，可以采取遍历的方式
		3）如果页面中只有一个li，返回的还是伪数组的形式
		4）如果页面中没有这个元素，返回空的伪数组的形式

	还可以获取某个元素（父元素）内部所有指定标签名的子元素：element.getElementsByTagName('标签名');
	PS：父元素必须是单个对象（必须指明是哪一个元素对象），获取的时候不包括父元素自己。


        3、通过HTML5新增的方法获取：
	1）document.getElementsByClassName('类名');  根据类名返回元素对象集合
	2）document.querySelector('选择器');  根据指定选择器返回第一个元素对象，注意里面的选择器需要加符号，类加.，ID要加#
	3）document.querySelectorAll();  返回指定选择器的所有元素对象集合


        获取特殊元素
	获取body元素
	    var bodyEle = document.body;
	    console.log(bodyEle);  或者dir

	获取html元素
	    var htmlEle = document.documentElement;
	    console.log(htmlEle);
	


    事件基础
        事件就是触发响应的一种机制
        事件由三部分组成（事件三要素）：
	事件源（事件被触发的对象  谁 按钮）、
	事件类型（如何触发  什么事件  比如鼠标点击（onclick)还是鼠标经过  还是键盘按下）、
	事件处理程序（通过一个函数赋值的方式完成）

        执行事件步骤：
	1）获取事件源
	2）绑定事件（注册事件）
	3）添加事件处理程序



    操作元素（DOM核心内容）

        改变元素内容
	element.innerText  不识别html标签，非标准，不保留内容格式
	element.innerHTML  识别html标签，W3C标准，保留内容格式
	 案例：分时问候案例

        修改表单属性
	利用DOM可以操作如下表单元素的属性：
		type、value、checked、selected、disabled

	案例：仿京东显示隐藏密码明文
	禁用按钮：this.disabled = true;

        样式属性操作：可以通过JS修改元素的大小、颜色、位置等
	element.style.属性	行内样式操作
		JS里面的样式采取驼峰命名法，比如fontSize，与CSS不一样；
		JS修改style样式操作，产生的是行内样式，css权重比较高
		案例：点击关闭二维码；循环精灵图背景

		案例：显示隐藏文本框内容
		    onfocus得到焦点；onblur失去焦点

	element.className  类名样式操作（适合于样式较多或者功能复杂的情况）
	    写法：element.className = '类名';  先写个CSS样式，再引用
	    案例：密码框验证信息

        排他思想：
	1、所有元素全部清除样式
	2、给当前元素设置样式
	3、注意顺序不能颠倒，首先干掉其他人，再设置自己

        自定义属性的操作
	1、获取属性值：
		element.属性	获得内置属性值（元素本身自带的属性）
		element.getAttribute('属性')	主要是获得自定义的属性  程序员自己定义的

	2、设置属性值
		element.属性 = '值';
		element.setAttribute('属性','值');	主要针对自定义属性

	3、移除属性值：element.removeAttribute('属性');

        H5自定义属性
	目的：为了保存并使用数据，有些数据可以保存到页面中而不用保存到数据库中

	1、设置H5自定义属性：H5规定自定义属性要以data-开头作为属性名并且赋值，
			例<div data-index='1'>或者使用JS设置：element.setAttribute('data-index','1');

	2、获取属性值
	     1）兼容性获取  element.getAttribute('data-index');
	     2）H5新增element.dataset.index 或者element.dataset['index']  IE11以上支持
        


    节点操作
        节点操作通过节点层级关系获取元素：利用父子兄节点关系获取元素；逻辑性强，但是兼容性稍差；比DOM提供的获取元素方法更简单

        节点概述：
	节点至少拥有nodeType（节点类型）、nodeName（节点名称）和nodeValue（节点值）这三个基本属性
	    nodeType：元素节点 1；
		      属性节点 2；
		      文本节点 3（文本节点包含文字、空格、换行等）

        节点层级（常见父子兄层级关系）
	1、父级节点：node.parentNode   得到的是离元素最近的父节点，如果找不到父节点就返回为null

	2、子节点：
	    1）parentNode.childrenNodes（标准）得到所有的子节点，包含元素节点、文本节点
	 		例：ul.childrenNodes 得到ul的所有子节点

	    2）parentNode.children（非标准） 获取所有的子元素节点   实际开发常用
        
	    3）parentNode.firstChild 获得第一个子节点，不管是文本节点还是元素节点；parentNode.firstElementChild  返回第一个子元素节点
		这两个都是IE9以上兼容

	3、兄弟节点
		1）nextSibling 下一个兄弟节点，没有返回null，以下同没有就返回null

		2）previousSibling 上一个兄弟节点

		3）nextElementSibling 下一个兄弟元素节点 

		4）previousElementSibling 上一个兄弟元素节点
		    3、4 IE9以上之支持

        创建节点  
	document.createElement('tagName');  本来这些元素不存在，根据需求动态生成的，也称为动态创建元素节点

	添加节点（注意要先创建节点再添加）
		（后面追加元素）  node.appendChild(child)  node是父级  child是子级；
		   
		（前面添加元素） node.insertBefore(child,指定元素)	     将child放在指定元素前


        删除节点  node.removeChild(child)

        复制节点（克隆节点） node.cloneNode()
	写法例：var lili = ul.children[0].cloneNode();    克隆ul里面的第一个子节点li

	如果括号参数为空或false，就是浅拷贝，只克隆复制节点本身，不克隆里面的子节点。（复制标签不复制里面的内容）

	如果为true，深拷贝，复制标签和里面的内容

        三种动态创建元素区别
	document.write()是直接将内容写入页面的内容流，但是文档流执行完毕，则它会导致页面全部重绘

	element.innerHTML  inner创建多个元素效率更高（不要拼接字符串，采取数组形式拼接），结构稍复杂

	document.createElement()  创建多个元素效率稍低一点点，但是结构更清晰







    DOM重点核心
	关于dom操作，主要针对于元素的操作。主要有创建、增、删、改、查、属性操作、事件操作

        创建
	1、document.write()

	2、element.innerHTML

	3、document.createElement()


        增
	1、node.appendChild(child)

	2、node.insertBefore(child,指定元素)


        删
	1、removeChild


        改
	1、修改元素属性：src、href、title等
	
	2、修改普通元素内容：innerHTML、innerText

	3、修改表单元素：value、type、disabled等

	4、修改元素样式：style、className


        查
	1、DOM提供的API方法：getElementById、getElementByTagName  古老用法，不太推荐

	2、H5提供的新方法：querySelector、querySelectorAll  提倡

	3、利用节点操作获取元素：父（parentNode)、子（children)、兄(previousElementSibling、nextElementSibling)  提倡


        属性操作（主要针对于自定义属性）

	1、setAttribute：设置dom的属性值

	2、getAttribute：得到dom的属性值

	3、removeAttribute 移除属性


        事件操作

	给元素注册事件，采取 事件源.事件类型 = 事件处理程序  

	鼠标事件：onclick、onmouseover、onmouseout、onfocus、onblur等





事件高级

    注册事件（绑定事件）

	注册事件两种方式：传统方式和方法监听注册方式
		传统注册方式：利用on开头的事件；特点是注册事件唯一性：同一个元素同一个事件只能设置一个处理函数

		方法监听注册方式：W3C标准 推荐方式
				addEventListener()是一个方法
				IE9之前的IE不支持此方法，可使用attachEvent()代替
				特点：同一个元素同一个事件可以注册多个监听器
				按注册顺序依次执行


	addEventListener事件监听方式

	    写法：eventTarget.addEventListener(type, listener[ , useCapture])    
 
		eventTarget监听对象；
		type事件类型字符串，比如click、mouseover，这里不带on，一定要带引号''
		listener：事件处理函数，事件发生时，会调用该监听函数
		useCapture：可选参数，布尔值，默认false。

	attachEvent事件监听方式    不推荐，尽量不用

	     写法：eventTarget.attachEvent(eventNameWithOn, callback)
		eventNameWithOn：事件类型字符串，比如onclick、onmouseover，要带on
		callback：事件处理函数，当目标触发事件时回调函数被调用






    删除事件（解绑事件）

	方式

		传统注册方式：eventTarget.onclick = null;

		方法监听注册方式：
			1、eventTarget.removeEventListener( type, listener[, useCapture]);
			2、eventTarget.detachEvent(type, listener[, useCapture]);




    DOM事件流 （简单说是传播过程）

	分3个阶段：
		1、捕获阶段：从顶层节点开始，逐级向下传播
		2、当前目标阶段
		3、冒泡阶段：事件开始时由最具体的元素接收，逐级向上传播到DOM最顶层节点的过程

	注意：1、JS代码中只能执行捕获或者冒泡其中的一个阶段
	          2、onclick和attachEvent只能得到冒泡阶段
	          3、addEventListener(type, listener[ , useCapture])第三个参数如果时true，表示在事件捕获阶段调用事件处理程序；如果是false（默认），表示在事件冒泡阶段调用事件处理程序
	          4、实际开发中我们很少使用事件捕获，我们更关注事件冒泡
	          5、有些事件是没有冒泡的，比如onblur、onfocus、onmouseenter、onmouseleave






    事件对象

	div.onclick = function(event) {}      event就是一个事件对象，当形参来看，是系统自动创建的，可以写成event、evt、e

	e.target返回的是触发事件的对象（元素），与this不同，this返回的是绑定事件的对象

	阻止默认行为（事件）   让链接不跳转  或者让按钮不提交
	    e.preventDefault();




    阻止事件冒泡的两种方式

	1、标准：e.stopPropagation()   写在只想显示的事件里

	2、非标准写法：IE6-8  利用事件对象cancelBubble属性




    事件委托（代理、委派）

	原理：不是给每个子节点单独设置事件监听器，而是事件监听器设置在其父节点上，然后利用冒泡原理影响设置每个子节点。

	作用：只操作了一次DOM，提高了程序的性能




    常用的鼠标事件

	1、禁止鼠标右键菜单：contextmenu   绑定contextmenu事件后e.preventDefault();阻止默认行为，此时右键不会弹出菜单

	2、禁止鼠标选中（selectstart 开始选中）  绑定该事件阻止默认行为即可禁止鼠标选中

	鼠标事件对象
	     event对象代表事件的状态；MouseEvent和键盘事件对象KeyboardEvent
		e.clientX	返回鼠标相对于浏览器窗口可视区的X坐标
		e.clientY	返回鼠标相对于浏览器窗口可视区的Y坐标
		e.pageX	返回鼠标相对于文档页面的X坐标
		e.pageY	返回鼠标相对于文档页面的Y坐标

	鼠标移动事件：mousemove



    常用的键盘事件

	1、keyup  按键弹起的时候触发

	2、keydown  按键按下的时候触发

	3、keypress  按键按下的时候触发  但是不识别功能键，如ctrl、shift等

		三个执行顺序：keydown---keypress---keyup

	键盘事件对象
		keyCode属性   keyup和keydown事件不区分字母大小写，a和A得到的都是65















BOM

    BOM概述

        BOM：Browser Object Model，浏览器对象模型，它提供了独立于内容而与浏览器窗口进行交互的对象，其核心对象是window。

        BOM构成：window包含：document、location、navigation、screen、history
	window对象是浏览器的顶级对象

	1、它是JS访问浏览器窗口的一个接口
	2、它是一个全局对象。定义在全局作用域中的变量、函数都会变成window对象的属性和方法。


    window对象的常见事件

        1、页面加载事件
	window.onload = function() {}  或者 window.addEventListener('load',function() {} )
	window.onload是窗口（页面）加载事件，当文档内容（包含dom元素、图片、flash、css）完全加载完成会触发该事件。

	1、有了window.onload就可以把JS代码写到页面元素的上方，因为onload是等页面内容全部加载完毕，再去执行处理函数
	2、window.onload传统注册事件方式只能写一次，如果有多个，以最后一个为准。

	与document.addEventListener('DOMContentLoaded',function() {} )区别：
	       load是等页面内容全部加载完毕执行；
	       DOMContentLoaded是DOM加载完毕，不包含图片、flash、css等就可以执行，加载速度比load更快一些

        2、调整窗口大小事件
	window.onresize = function() {} 或者window.addEventListener('resize',function() {});
	只要窗口大小发生像素变化了，就会触发；经常利用这个事件完成响应式布局。window.innerWidth当前屏幕宽度



    定时器

        1、setTimeout()
	window.setTimeout(调用函数, [延迟的毫秒数]);
	     window在调用的时候可以省略；
	     这个延迟时间单位是毫秒，单位可以省略，毫秒如果省略默认是0；
	     这个调用函数可以直接写函数，或者写函数名或者采取字符串‘函数名（）’三种形式，第三种不推荐；
	     定时器可能有很多，所以经常给定时器赋值一个标识符。
	     setTimeout()也成为回调函数callback


        	停止setTimeout()定时器    window.clearTimeout(timeoutID)


        2、setInterval()
	window.setInterval(调用函数, [延迟的毫秒数]);     setInterval()方法重复调用一个函数，每隔这个时间，就去调用一次回调函数

	停止setInterval()定时器      window.clearsetInterval(intervalD)




    JS执行机制

        JS是单线程

        同步和异步
	同步：前一个任务结束后再执行后一个任务（相当于单线程）

	异步：多个任务可以同时进行（相当于多线程）

	同步任务：同步任务都在主线程上执行，形成一个执行栈

	异步任务：JS的异步是通过回调函数实现的。

		一般而言，异步任务有以下三种类型：
			1、普通事件，如click、resize等；
			2、资源加载，如load、error等；
			3、定时器，包括setInterval、setTimeout等。
		异步任务相关回调函数添加到任务队列中（任务队列也叫消息队列）


        执行机制

	1、先执行执行栈中的同步任务；

	2、异步任务（回调函数）放入任务队列中；

	3、一旦执行栈中的所有同步任务执行完毕，系统就会按次序读取任务队列中的异步任务，于是被读取的异步任务结束等待状态，进入执行栈开始执行


	事件循环：主线程不断的重复获得任务、执行任务、再获取任务、再执行的机制


   location对象

	window对象给我们提供了一个location属性用于获取或设置窗体的URL，并且可以用于解析URL。因为这个属性返回的是一个对象，所以这个属性也称为location对象

	location对象的属性

		location.href	获取或者设置整个URL
		location.host	返回主机（域名）
		location.port	返回端口号  如果未写 返回 空字符串
		location.pathname	返回路径
		location.search	返回参数
		location.hash	返回片段 #后面内容  常见于链接  锚点


	location对象的方法

		location.assign()	跟href一样，可以跳转页面（也称为重定向页面）
		location.replace()	替换当前页面，因为不记录历史，所以不能后退页面
		location.reload()	重新加载页面，相当于刷新按钮或者f5，如果参数为true，强制刷新ctrl+f5




   navigator对象
	navigator对象包含有关浏览器的信息，它有很多属性，通常最常用的是userAgent，该属性可以返回由客户机发送服务器的user-agent头部的值



   history对象（与浏览器历史记录进行交互）

	history对象方法
		back()		可以后退功能
		forward()		前进
		go(参数)		前进后退功能，参数如果是1  前进一个页面，如果是-1  后退一个页面








PC端网页特效

    元素偏移量offset系列（可以动态的得到该元素的位置（偏移）、大小等）

	获得元素距离带有定位父元素的位置
	获得元素自身的大小（宽高）
	注意：返回的数值都不带单位

        offset系列常用属性：
	element.offsetParent	返回作为该元素带有定位的父级元素，如果父级都没有定位则返回body
	element.offsetTop		返回元素相对带有定位父元素上方的偏移
	element.offsetLeft		返回元素相对带有定位父元素左边框的偏移
	element.offsetWidth	返回自身包括padding、边框、内容区的宽度，返回数值不带单位
	element.offsetHeight	返回自身包括padding、边框、内容区的高度，返回数值不带单位


         offset和style的区别

	1、offset可以得到任意样式表中的样式值，style只能得到行内样式表中的样式值；

	2、offset系列获得的数值是没有单位的，style.width获得的是带有单位的字符串；

	3、offsetWidth包含padding+border+width，style.width获得不包含padding和border的值；

	4、offsetWidth等属性是只读属性，只能获取不能赋值，style.width是可读写属性

	5、所以，想要获取元素大小位置用offset更合适，想要给元素更改值就用style。









