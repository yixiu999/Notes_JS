
编程基础

    编程语言
         计算机语言：机器语言、汇编语言、高级语言
             机器语言：由0和1组成的二进制数，二进制是计算机语言的基础。计算机能识别的语言。
             汇编语言：与机器语言实质相同，直接对硬件操作，采用英文缩写的标识符，容易识别和记忆。
             高级语言：主要相对于低级语言而言，并不特指某一种具体的语言，而是包括了很多编程语言，常用的由C语言、C++、Java、C#、Python、PHP、JavaScript等

        编程语言和标记语言（html）的区别
            编程语言：有很强的逻辑和行为能力。在编程语言里，会看到很多if else、for、while等具有逻辑性和行为能力的指令，这是主动的。
            标记语言（html）：不同于向计算机发出指令，常用于格式化和链接。标记语言的存在是用来被读取的，是被动的。

     计算机基础
        计算机组成：1、硬件：输入设备、输出设备、CPU（负责处理数据与运算）、硬盘（永久存）、内存（暂时存）。
	            2、软件：系统软件（Windows、Linux、macOS）、应用软件（浏览器、QQ等）

        数据存储
	计算机内部使用二进制0和1来表示数据

	数据存储单位：bit<byte<kb<GB<TB<...
	    1bit可以保存一个0或1（最小存储单位）；1B=8b；1KB=1024B；1MB=1024KB












JavaScript

    初识
        JS历史：
        布兰登·艾奇（Brendan Eich，1961~）
        最初命名为LiveScript，后来与Sun合作之后将其改名为JavaScript.

        JS：是一种运行在客户端的脚本语言（Script：脚本）；现在也可以基于Node.js技术进行服务器编程
	脚本语言：不需要编译，运行过程中由js解释器（js引擎）逐行来进行解释并执行。

        JS的作用：表单动态校验（JS产生最初目的）、网页特效、服务端开发（Node.js）、桌面程序(Electron）、APP(Cordova)、控制硬件-物联网(Ruff)、游戏开发(cocos2d-js)

        HTML/CSS/JS关系
            HTML/CSS标记语言：描述类语言
            JS语言：编程类语言

        浏览器执行JS简介
            浏览器分成两部分：渲染引擎和JS引擎
	渲染引擎：用来解析HTML和CSS，俗称内核，比如chrome浏览器的blink，老版本的webkit
	JS引擎：也称为JS解释器。用来读取网页中的JS代码，对其处理后运行，比如chrome浏览器的V8

        JS的组成：ECMAScript（JS语法）、DOM（页面文档对象模型）、BOM（浏览器对象模型）

        JS注释
            单行注释：//			快捷键：ctrl+/
            多行注释：/* */		快捷键：shift+alt+a		vscode中修改多行注释的快捷键：ctrl+shift+/

        JS输入输出语句
            alert(msg)		浏览器弹出警示框
            console.log(msg)	浏览器控制台打印输出信息
            prompt(msg)	浏览器弹出输入框，用户可以输入


    变量
        使用：1、声明变量，例var age；//声明一个名称为age的变量
	  2、赋值		age = 10;

        变量的初始化，例：var age = 10;

        变量命名规范
            组成：字母、数字、下划线、美元符号；
            严格区分大小写；不能以数字开头；关键字、保留字不能做变量名；变量名必须有意义；遵守驼峰命名法

    数据类型
        JS是一种弱类型或者是动态语言；JS拥有动态类型，同时也意味着相同的变量可用作不同的类型

        分类
            简单数据类型：
	Number：数字型，默认值0；
		在JS中，八进制开头0；十六进制开头0x;
		范围：alert(Number.Max_value); //1.7976931348623457e+308
		          alert(Number.Min_value); //5e-324
		数字型三个特殊值：
			alert(Infinity); //Infinity表示无穷大，大于任何数值
			alert(-Infinity); //-Infinity表示无穷小，小于任何数值
			alert(NaN); //NaN表示Not a Number，代表一个非数值
		isNaN()：用来判断非数字，并返回一个值；如果是数字返回false，否则返回true;

	String：字符串类型，如“张三”，默认值“”；引号可单可双，推荐单引号；
		字符串转义符：
			\n	换行
			\\	斜杠\
			\'	‘单引号
			\"	“双引号
			\t	tab 缩进
			\b	空格
		字符串长度：可以通过字符串的length获得字符串的长度；
		字符串拼接：字符串+任何类型=拼接之后的新字符串；

	Boolean：布尔值类型，如true,false，默认值false；
		布尔型和数字型相加的时候，true=1；false=2；

	Undefined：var a; 声明了变量a但是没有给值，此时a=Undefined，默认值undefined；
		undefined和数字相加结果为NaN；

	Null：var a=null; 声明了变量a为空值，默认值null；
		空值和数字相加还是数字；

            复杂数据类型：object

    获取变量的数据类型：typeof

    数据类型转换
       转换成字符型方式：
	toString()		转换成字符串		var num = 1; alert(num.toString());
	 String()强制转换	转换成字符串		var num = 1; alert(String(num));
	加号拼接字符串	和字符串拼接的结果都是字符串	var num = 1;alert(num + "我是字符串");
             PS：第三种也叫隐式转换

        转换成数字型
	parselnt(string)函数		将string类型转成整数数值型	parselnt('78')
	parseFloat(string)函数	将string类型转成浮点数数值型	parseFloat('78.21')
	Number()强制转换函数	将string类型转成数值型	Number('12')
	js隐式转换（- * /）		利用算术运算隐式转为数值型	'12'-0

        转换成布尔型
	Boolean()函数	其他类型转成布尔值		Boolean('true');
	代表空、否定的值会被转换为false，如''、NaN、null、undefined，其他值都会被转为true




    运算符
        算术运算符：加减乘除取余（%)       浮点数有精度问题，算术中会有误差，也不能直接拿两个浮点数来比较

        表达式和返回值

        递增（++）和递减（--）运算符	++age类似于age= age+1
	1、前置递增和后置递增如果单独使用，效果是一样的
	2、后置口诀：先返回原值，后自加1

        比较运算符，会返回一个布尔值
	其中：=		赋值	把右边给左边
	          ==		判断	判断两边值是否相等（注意此时有隐式转换）
	          ===	全等	判断两边的值和数据类型是否完全相同

        逻辑运算符，返回值也是布尔值
	与（&&）；或（||）；非（！）（！取反符）
	
	短路运算（逻辑中断）  原理：当有多个表达式（值）时，左边的表达式（值）可以确定结果时，就不再继续运算右边的表达式的值。
	    逻辑与：表达式1 && 表达式2	
		如果第一个表达式的值为真，则返回表达式2；
		如果第一个表达式的值为假，则返回表达式1

	    逻辑或：如果表达式1结果为真，则返回表达式1；
		 如果表达式1结果为假，则返回表达式2

        赋值运算符（+、+=、-=、*=、/=、%=）

        运算符优先级
	(优先级)1	小括号（）
	2	一元运算符 ++ -- ！
	3	算数运算符  先乘除取余 后加减
	4	关系运算符  > >=等
	5	相等运算符  ==  !=  ===  !==
	6	逻辑运算符  先&& 后||
	7	赋值运算符 = 
	8	逗号运算符 ，




    流程控制分支语句
        流程控制主要三种结构：顺序结构、分支结构、循坏结构

        分支结构
	单分支语句：if(条件表达式){}
	双分支语句：if(条件表达式){} else{}
	多分支语句：if(条件表达式1){} else if(条件表达式2){} else{}

        三元表达式
	语法结构：条件表达式？表达式1：表达式2
		如果条件表达式结果为真，则返回表达式1的值，如果为假，则返回表达式2的值

        分支流程控制——switch语句
	switch(表达式）{
		case value1:
			执行语句1；
			break;
		case value2:
			执行语句2；
			break;
		...
		default:
			执行最后的语句；
		}

	switch和if else if的区别：
	    1、一般情况下，可以互相替换；
	    2、switch通常处理case为比较确定值的情况，而if else语句更加灵活，常用于范围判断；
	    3、switch进行条件判断后直接执行到程序的条件语句，效率更高；
	    4、当分支较少时，if else执行效率比较高；
	    5、当分支较多时，switch执行效率比较高，而且结构更清晰；



    循环：重复地执行代码

        for循环
	语法结构：
	   for(初始化变量；条件表达式；操作表达式) { 循环体 }

        双重for循环

        while循环
	语法结构：var num = 1;
		whlie(num <= 100){
			console.log('hi');
			num++;	//防止死循环
		}

        do while循环
	语法结构：do{
		        //循环体
		}while(条件表达式)
	先执行一次循环，再判断是否符合条件，如果条件表达式结果为真，则继续执行循环体，否则推出循环

        continue break关键字
	continue跳出当前次的循环，继续后面的循环
	break跳出整个循环



    数组

        创建数组方式：1、利用new：var arr = new Array();//创建一个空数组
	                2、var arr = []; //[]是数组字面量

        数组的索引：用来访问数组元素的序号（从0开始）

        遍历数组：把数组的元素从头到尾访问一次

        数组中新增元素：1、通过修改length长度；2、修改索引号，追加数组元素

        冒泡排序：把一系列的数据按照一定的顺序进行排列显示（从小到大或从大到小）




    函数：封装了一段可以被重复执行调用的代码块，目的是可以让大量代码重复使用

        函数使用：1、声明函数：function 函数名（）{ 函数体 } ；函数名一般是动词；函数不调用不会执行
	         2、调用函数：函数名（）；调用函数的时候一定要写小括号

        函数的封装：把一个或者多个功能通过函数的方式封装起来，对外只提供一个简单的函数接口。简单说是打包


        函数的参数
	形参和实参：形参是函数定义的时候传递的参数（function 函数名(形参1，形参2...)），相当于坑；形参可以看作是没有定义的变量；
		实参是函数调用的时候传递的参数，实参是传递给形参的（函数名(实参)），实参相当于萝卜
	形参和实参的匹配问题：如果实参的个数多于形参的个数，会取到形参的个数；
			    如果实参的个数<形参，多余的形参定义为undefined，最终的结果就是NaN

        函数的返回值return
	函数只是实现某种功能，最终的结果需要返回给函数的调用者函数名（），通过return实现，
	只要函数遇到return，就把后面的结果返回给函数的调用者，函数名（） = return后面的结果。
	return终止函数，return只能返回一个值，如果用逗号写多个值，只返回最后一个；
	如果没有return，则返回undefined

        arguments的使用
	当我们不知道有多少个参数传递的时候，可以用arguments来获取。
	所有函数都内置了一个arguments对象，arguments对象中存储了传递的所有实参。
	arguments是一个伪数组的形式展现，没有真数组的一些方法pop()，push()等。

        函数的声明方式
	1、利用函数关键字function自定义函数（命名函数）：声明函数，调用函数；
	2、函数表达式（匿名函数）：var 变量名 = function(){}，也需要调用;






    作用域
        就是代码名字（变量）在某个范围内起作用和效果，目的是为了提高程序的可靠性，更重要的是减少命名冲突

        作用域分类：
	全局作用域：整个script标签，或者实在一个单独的JS文件里起效果
	局部作用域（函数作用域）：在函数内部就是局部作用域，这个代码名字只在函数内部起效

        变量作用域：全局变量和局部变量
	PS：在函数内部，没有声明的变量也是全局变量

	从执行效率来看全局变量和局部变量：
	    1、全局变量只有浏览器关闭的时候才会销毁，比较占内存资源；
	    2、局部变量当程序执行完毕就会销毁，比较节约内存资源

        作用域链
	内部函数访问外部函数的变量，采取的是链式查找的方式来决定取哪个值（就近原则）










    预解析
        js引擎运行js分两步：预解析和代码执行
            1、预解析：js引擎会把js里面所有的var还有function提升到当前作用域的最前面
            2、代码执行：按照代码书写的顺序从上往下执行

        预解析分为：变量预解析（变量提升）和函数预解析（函数提升）
	1、变量提升：就是把所有的变量声明提升到当前的作用域最前面，不提升赋值操作
	2、函数提升：就是把所有的函数声明提升到当前的作用域最前面，不调用函数









    JS对象
        对象：一个具体的事物；在js中，对象是一组无序的相关属性和方法的集合（对象是由属性和方法组成）
	属性：事物的特征，在对象中用属性来表示（常用名词）
	方法：事物的行为，在对象中用方法来表示（常用动词）

        创建对象的方法
	
	1、利用字面量创建对象：就是花括号{}里面包含了表达这个具体事物（对象）的属性和方法
	   1）里面的属性或方法采用的是键值对的形式，键 属性名：值 属性值
	   2）多个属性或者方法中间用逗号隔开
	   3）方法冒号后面跟的是一个匿名函数

	   定义对象语法：
		例：var obj = {
		         name: ' '，
		         age: ' '，
		         方法名: function(){ }	//方法的写法；这里写的是匿名函数
		       }

	    使用对象方法：
		1、调用对象的属性，对象名.对象名，例：console.log(obj.name);
		2、调用属性的另一种方法，对象名['属性名']，例：console.log(obj['name']);
		3、调用对象的方法，对象名.方法名()，例：obj.方法名();   调用函数一定要记得带括号

	2、利用new Object创建对象（跟创建数组一样）
	    1）利用等号=赋值的方法添加对象的属性和方法
	    2）每个属性和方法之间用分号结束

	3、利用构造函数创建对象
	格式：function 构造函数名(){	//构造函数名首字母大写
		this.属性 = 值；
		this.方法 = function(){}
		}
	           var 对象名 = new 构造函数名（）；  //调用构造函数创建对象，调用函数返回的是一个对象
	      调用构造函数必须使用new；只要new Object()调用函数就创建一个对象object{}
	      对象实例化：通过new关键字创建对象的过程

        new关键字
	执行过程：1、new构造函数可以在内存中创建了一个空的对象；
		 2、this就会指向刚才创建的空对象；
		 3、执行构造函数里面的代码，给这个空对象添加属性和方法；
		 4、返回这个对象

        遍历对象
	for...in可以对对象和数组进行遍历
	语法：
	    for (var k in obj）{
		console.log(k);	//k 变量，输出得到的是属性名
		console.log(obj[k]);	//这里得到的是属性值
		}










    内置对象（就是已经内置好的对象，可以直接拿来用）
        JS中的对象分三种：自定义对象、内置对象、浏览器对象。前两个是JS基础内容，属于ECMAScript；第三个属于JS独有
        JS提供了多个内置对象：Math、Date、Array、String等

        查阅文档
	MDN网页可查阅学习对象中的方法

        Math对象（内置对象，不是构造函数，不需要new来调用，直接使用里面的属性和方法即可）
	Math.PI		派	
	Math.max()	取最大值，输入字符串会输出NaN，什么都不输入会输出-Infinity
	Math.min()	取最小值
	Math.abs()	绝对值，输入'-1' 隐式转换，会把字符串型-1转换成数字型，输入字符串会输出NaN
	Math.floor()	向下取整
	Math.ceil()	向上取整
	Math.round()	四舍五入

	随机数方法random()：返回一个随机的小数，范围是[0，1）


        Date对象（构造函数，要new对象）
	var date = new Date();  可以加参数
        	console.log(date.getFullYear());  //年
        	console.log(date.getMonth() + 1);  //月，getMonth()返回的是上个月，所以要加1
        	console.log(date.getDate());  //日
        	console.log(date.getDay());  //星期，这里输出的是数字，如果要输出“星期几”可以使用数组

	获得Date总的毫秒数（时间戳），就是距离1970年1月1日过了多少毫秒数：
	       两个方法：valueOf()，getTime()；
	       简单的写法是var date = +new Date();
	       H5新增的：直接输出Date.now()方法，就是现在距离过去的总的毫秒数


        数组Array对象
	创建数组的两个方法：利用数组的字面量；利用new Array()；

	检测是否为数组方法：
	       1、instanceof运算符，可以用来检测是否为数组，例var arr = [];
        						console.log(arr instanceof Array);   //这里输出为true
	       2、Array.isArray()方法（H5新增的方法，ie9以上版本支持）

	添加数组元素的方法：
		1、push()方法，添加在数组末尾，可以添加一个或多个数组元素。push完毕之后，返回的结果是新数组的长度
		2、unshift()方法，添加在数组开头，也可一个或多个元素。执行完后，也是返回新数组长度

	删除数组元素的方法：
		1、pop()方法，删除数组的最后一个元素，不用带参数，一次只能删一个，返回删除的元素
		2、shift()方法，删除数组第一个元素，其他同上

	数组排序方法：reverse()翻转数组；sort()冒泡排序
		如果只写sort()方法，只能给个位数排序；
		超过一位数的排序需要加上函数，例：arr.sort(function(a,b){return a-b;})  这个是升序，把a-b改成b-a就是降序
				

	数组索引方法：
		indexOf(数组元素)：返回该数组元素索引号，只返回第一个满足条件的索引号，找不到满足条件的就返回-1
		lastIndexOf(数组元素)：从后往前找

	数组转换为字符串：
		toString()：将数组转换为字符串
		join()：分隔符，默认是逗号，可以写任何符号，例：arr.join('-');  用-分隔

	其他：
		concat()	连接两个或多个数组，不影响原数组	返回一个新的数组
		slice()	数组截取slice(begin,end)		返回被截取项目的新数组
		splice()	数组删除splice(begin,end)		返回被删除项目的新数组，这个会影响原数组


        字符串对象
	基本包装类型：把简单数据类型包装成复杂数据类型，这样基本数据类型就有了属性和方法。String、Number、Boolean有

	由于字符串的不可变性，不要大量的重新赋值和拼接字符串，会占用很多内存

	根据字符返回位置：str.indexOf('要查找的字符',[从第几位开始查找]);

	根据位置返回字符：charAt(index);	
			charCodeAt(index)：返回相应索引号的字符的ASCII值，目的是判断用户按下了哪个键
			str[index]：H5新增的

	字符串操作方法
		concat('字符串1','字符串2',...)	用于连接两个或多个字符串。拼接字符串，等效于+，+更常用
		substr(start,length)		从start开始，length取的个数
		slice(start,end)		从start开始，截取到end位置，end取不到
		substring(start,end)		从start开始，截取到end位置，end取不到，基本和slice相同，但是不接受负值

	替换字符：replace('被替换的字符','替换的字符')；只替换第一个符合条件的字符，需要替换多个可以用循环
	字符转换为数组split('分隔符')









    简单数据类型与复杂数据类型

	简单数据类型（值类型）：string，number，boolean，undefined，null（null返回的是一个空的对象，object，如果有个变量我们之后打算存储为对象，暂时没想好放啥，可以给null)
	复杂数据类型（引用类型）：就是通过new创建的对象，如Object、Array、Date等

	操作系统会把内存分为两大块：
		栈：存放简单数据类型
		堆：存放复杂数据类型


	










