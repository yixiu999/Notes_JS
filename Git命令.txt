1、global全局命令，设置用户名和邮箱
2、初始化Git仓库的命令
3、帮助命令
4、git的四种状态
5、看git状态
6、跟踪新文件
7、提交更新
8、对已提交的文件进行修改
9、暂存已修改的文件
10、撤销对文件的修改
11、向暂存区中一次性添加多个文件
12、取消暂存的文件
13、跳过使用暂存区域（工作区直接提交到仓库）
14、从Git仓库移除文件
15、忽略文件
16、查看提交历史
17、回退到指定的版本
18、分支类命令



ssh连接GitHub
	ssh -T git@github.com
将本地数据库同步到GitHub
	git push -u origin main




global全局命令，设置用户名和邮箱
	git config --global user.name "xxx"
	git config --global user.email "xxx"



初始化Git仓库的命令
	git init


帮助
	git help 加想要了解的命令
	例如：git help config      会弹出一个说明网页
	
	git config -h  直接展示在控制面板中


git的四种状态：未跟踪（未被git管理）
	        未修改（工作区的文件与仓库中的文件内容一致）
	        已修改（工作区的文件内容已修改，与仓库中的不一致）
	        已暂存（工作区中的已修改的文件已被放到暂存区，准备将暂存区的文件放到仓库中）


看git状态
	git status（输出的状态报告很详细，有些繁琐） 

	(精简方式)
	git status -s 等同于 git status --short   
	红色的??：未跟踪的文件；
	绿A：新增到暂存区的文件；
	红M：已修改未暂存；
	绿M：已修改且已暂存;
	绿D：已删除


跟踪新文件
	git add 文件名   （add是多功能命令，具体请看“暂存已修改的文件”）



提交更新
	git commit -m "新建了index.html文件"
	-m选项后面是本次的提交信息，用来对提交的内容做进一次描述	


对已提交的文件进行修改
	打开文件修改，查看状态可以看到已修改



暂存已修改的文件
	工作区中的文件已被修改，如果要暂存这次修改，需要再次运行git add命令，这个是多功能命令，主要有三个功能：
		1、可以用它开始跟踪新文件；

		2、把已跟踪的、且已修改的文件放到暂存区；

		3、把有冲突的文件标记为已解决状态；



撤销对文件的修改
	把对工作区中对应文件的修改，还原成git仓库中所保存的版本。
	操作的结果：所有的修改会丢失，且无法恢复！谨慎操作！！！

	git checkout -- index.html   撤销



向暂存区中一次性添加多个文件
	git add .     一次性将所有的新增和修改过的文件加入暂存区



取消暂存的文件
	git reset HEAD 要移除的文件名
	git reset HEAD .  移除全部的文件



跳过使用暂存区域（工作区直接提交到仓库）
	git commit -a -m "描述信息"   把所有已经跟踪的文件暂存起来一并提交
	



从Git仓库移除文件
	1、从Git仓库和工作区中同时移除index.html文件
		git rm -f index.html

	2、只从Git仓库中移除index.html，但保留工作区中的index.html文件，操作完之后该文件的状态为：未跟踪
		git rm --cached index.html



忽略文件
	有些文件无需纳入Git的管理，也不希望它们总出现在未跟踪文件列表。在这种情况下，可以创建一个名为.gitignore的配置文件，列出要忽略的的文件的匹配模式。
	文件.gitignore的格式规范：
		1、以#开头的是注释；

		2、以/结尾的是目录；

		3、以/开头 防止递归；

		4、以！开头表示取反；

		5、可以使用glob模式进行文件和文件夹的匹配（glob：简化了的正则表达式）

		glob模式：
			1、*匹配0个或多个任意字符；

			2、[abc]匹配任何一个列在方括号中的字符（此案例匹配1个a或者1个b或1个c）

			3、问号?只匹配一个任意字符；

			4、在方括号中使用短划线分隔两个字符，表示所在在这两个字符范围内的都可以匹配（比如[0-9]表示匹配所有0-9的数字）；

			5、两个星号**表示匹配任意中间目录（比如a/**/z可以匹配a/z、a/b/z或a/b/c/z等）
 	


查看提交历史
	git log  按时间先后顺序列出所有的提交历史，最近的提交在上面

	git log -2    只展示最新的两条，数字可以改

	git log -2 --pretty=oneline   在一行上展示最近两条提交历史的信息

	git log -2 --pretty=format:"%h | %an | %ar | %s"
	自定义输出格式在一行上展示最近两条提交历史的信息，
	%h 提交的简写哈希值；%an作者名字；%ar作者修订日期，按多久以前的方式显示；%s提交说明




回退到指定的版本
	git log --pretty=oneline   在一行上展示所有的提交历史

	git reset --hard <CommitID>   根据指定的提交ID回退到指定版本

	git reflog --pretty=oneline    在旧版本中使用该命令，查看命令操作的历史

	git reset --hard <CommitID>    再次根据最新的提交ID，跳转到最新的版本

	

分支类命令

查看分支列表
	git branch

创建新分支
	git branch 分支名称

切换分支
	git checkout 分支名称

新建分支并切换到该分支
	git checkout -b 分支名称

合并分支
	1、切换到master分支
	     git checkout master

	2、在master分支上运行git merge命令，将login分支的代码合并到master分支
	      git merge 分支名称


删除分支
	git branch -d 分支名称

将本地分支推送到远程仓库
	git push -u 远程仓库别名 本地分支名称：远程分支名称
	-u表示把本地分支和远程分支进行关联，只在第一次推送的时候需要带-u参数
	实际案例：git push -u origin payment:pay

查看远程仓库中所有的分支列表
	git remote show 远程仓库名称

跟踪分支：从远程仓库中，把对应的远程分支下载到本地仓库
	git checkout 远程分支的名称

	如果下载到本地仓库要改名：git checkout -b 本地分支名称 远程仓库名称/远程分支名称